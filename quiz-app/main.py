import flet as ft
import json
import os
import threading
import time

QUIZ_FILE = "quizzes.json"
RESULTS_FILE = "results.json"

# ======== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ =========
def load_quizzes():
    if os.path.exists(QUIZ_FILE):
        with open(QUIZ_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "Python": [
            {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?", "options": ["–§—É–Ω–∫—Ü–∏—è", "–û–±—ä–µ–∫—Ç", "–ò–º—è, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º"], "answer": "–ò–º—è, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º"},
            {"question": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π?", "options": ["if", "loop", "def"], "answer": "if"},
        ]
    }

def save_quizzes(data):
    with open(QUIZ_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_results():
    if os.path.exists(RESULTS_FILE):
        with open(RESULTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_results(data):
    with open(RESULTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =========
def main(page: ft.Page):
    page.title = "Quiz App"
    page.theme_mode = "light"

    quizzes = load_quizzes()
    results = load_results()

    user_name = ft.Ref[str]()
    selected_quiz = ft.Ref[str]()
    current_question = ft.Ref[int]()
    score = ft.Ref[int]()
    timer_text = ft.Text()
    stop_timer = False

    def toggle_theme(e):
        page.theme_mode = "dark" if page.theme_mode == "light" else "light"
        page.update()

    def go_to_theme_selection(e):
        if not name_field.value.strip():
            name_field.error_text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            page.update()
            return
        user_name.value = name_field.value.strip()
        show_theme_selection()

    def start_quiz(theme):
        selected_quiz.value = theme
        current_question.value = 0
        score.value = 0
        show_question_screen()

    def show_theme_selection():
        page.clean()
        page.appbar = ft.AppBar(
            title=ft.Text("–í—ã–±–æ—Ä —Ç–µ–º—ã"),
            actions=[ft.IconButton(icon=ft.Icons.DARK_MODE, on_click=toggle_theme)]
        )
        buttons = [ft.ElevatedButton(theme, on_click=lambda e, t=theme: start_quiz(t)) for theme in quizzes]
        page.add(
            ft.Text(f"–ü—Ä–∏–≤–µ—Ç, {user_name.value}! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", size=24),
            *buttons,
            ft.ElevatedButton("üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", on_click=show_results),
            ft.ElevatedButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", on_click=show_add_quiz_form),
        )

    def start_timer():
        nonlocal stop_timer
        seconds = 60
        while seconds > 0 and not stop_timer:
            timer_text.value = f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {seconds} —Å–µ–∫"
            time.sleep(1)
            seconds -= 1
            page.update()
        if not stop_timer:
            result_text.value = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!"
            disable_buttons()
            page.update()

    def disable_buttons():
        for btn in options_column.controls:
            btn.disabled = True

    def load_question():
        q = quizzes[selected_quiz.value][current_question.value]
        question_text.value = f"–í–æ–ø—Ä–æ—Å {current_question.value + 1}: {q['question']}"
        options_column.controls.clear()
        result_text.value = ""
        for opt in q["options"]:
            options_column.controls.append(ft.ElevatedButton(text=opt, on_click=check_answer))

        # –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        nonlocal stop_timer
        stop_timer = False
        threading.Thread(target=start_timer, daemon=True).start()
        page.update()

    def check_answer(e):
        nonlocal stop_timer
        stop_timer = True
        selected = e.control.text
        correct = quizzes[selected_quiz.value][current_question.value]["answer"]

        if selected == correct:
            score.value += 1
            result_text.value = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            result_text.value = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û—Ç–≤–µ—Ç: {correct}"

        disable_buttons()
        page.update()
    def next_question(e):
        current_question.value += 1
        if current_question.value < len(quizzes[selected_quiz.value]):
            load_question()
        else:
            results.append({"name": user_name.value, "score": score.value, "topic": selected_quiz.value})
            save_results(results)
            show_result_screen()

    def show_question_screen():
        page.clean()
        next_btn = ft.ElevatedButton("–°–ª–µ–¥—É—é—â–∏–π", on_click=next_question)
        page.add(timer_text, question_text, options_column, result_text, next_btn)
        load_question()

    def show_result_screen():
        page.clean()
        page.add(
            ft.Text(f"{user_name.value}, —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–µ {selected_quiz.value}: {score.value}", size=24),
            ft.ElevatedButton("üìã –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", on_click=lambda e: show_theme_selection()),
            ft.ElevatedButton("üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", on_click=show_results),
        )

    def show_results(e=None):
        page.clean()
        page.add(ft.Text("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", size=24))
        if not results:
            page.add(ft.Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."))
        for r in results:
            page.add(ft.Text(f"{r['name']} ‚Äî {r['score']} ({r['topic']})"))
        page.add(ft.ElevatedButton("üîô –ù–∞–∑–∞–¥", on_click=lambda e: show_theme_selection()))

    def show_add_quiz_form(e=None):
        page.clean()

        title_input = ft.TextField(label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")
        question_input = ft.TextField(label="–í–æ–ø—Ä–æ—Å")
        option1 = ft.TextField(label="–í–∞—Ä–∏–∞–Ω—Ç 1")
        option2 = ft.TextField(label="–í–∞—Ä–∏–∞–Ω—Ç 2")
        option3 = ft.TextField(label="–í–∞—Ä–∏–∞–Ω—Ç 3")
        answer_input = ft.TextField(label="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        status = ft.Text()
        temp_questions = []

        def add_question(e):
            if not all([question_input.value, option1.value, option2.value, option3.value, answer_input.value]):
                status.value = "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"
                page.update()
                return

            temp_questions.append({
                "question": question_input.value,
                "options": [option1.value, option2.value, option3.value],
                "answer": answer_input.value
            })
            question_input.value = option1.value = option2.value = option3.value = answer_input.value = ""
            status.value = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {len(temp_questions)}"
            page.update()

        def save_quiz(e):
            title = title_input.value.strip()
            if not title or not temp_questions:
                status.value = "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 1 –≤–æ–ø—Ä–æ—Å"
                page.update()
                return
            quizzes[title] = temp_questions.copy()
            save_quizzes(quizzes)
            temp_questions.clear()
            title_input.value = ""
            status.value = "‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            page.update()

        page.add(
            ft.Text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã", size=24),
            title_input,
            question_input, option1, option2, option3, answer_input,
            ft.Row([
                ft.ElevatedButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", on_click=add_question),
                ft.ElevatedButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_quiz),
                ft.ElevatedButton("üîô –ù–∞–∑–∞–¥", on_click=lambda e: show_theme_selection()),
            ]),
            status
        )

    # ==== –≠–∫—Ä–∞–Ω –∏–º–µ–Ω–∏ ====
    name_field = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –∏–º—è", autofocus=True)
    page.add(
        ft.Container(
            content=ft.Column([
                ft.Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!", size=26, weight=ft.FontWeight.BOLD),
                name_field,
                ft.ElevatedButton("–ù–∞—á–∞—Ç—å", on_click=go_to_theme_selection),
                ft.ElevatedButton("üåô –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", on_click=toggle_theme),
            ],
            alignment=ft.MainAxisAlignment.CENTER),
            alignment=ft.alignment.center,
            padding=40,
            bgcolor=ft.Colors.BLUE_50,
            border_radius=10,
        )
    )
    question_text = ft.Text(size=20)
    options_column = ft.Column()
    result_text = ft.Text(size=16)

ft.app(target=main,
view=ft.WEB_BROWSER, port= 8000)